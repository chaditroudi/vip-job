<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Offre Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>
<body class="bg-gray-100">

  <div class="flex h-screen">
    <!-- Sidebar -->
    {{> sidebar }} <!-- Include sidebar partial -->

    <!-- Main Content -->
    <div class="flex-1 flex flex-col">
      <!-- Header -->
      {{> header }} <!-- Include header partial -->

      <!-- Content Section -->
      <main class="p-6">
        <div class="bg-white shadow p-4 flex justify-between items-center">
          <h1 class="text-xl font-semibold">Offres Management</h1>
          <button id="addOffreBtn" class="bg-green-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-green-700">Add Offre</button>
        </div>
        
        <div class="bg-white p-6 shadow rounded-lg mt-4">
          <table class="w-full text-left border-collapse">
            <thead>
              <tr class="bg-gray-200 text-gray-600">
                <th class="p-3 border">ID</th>
                <th class="p-3 border">Titre</th>
                <th class="p-3 border">Description</th>
                <th class="p-3 border">Date de création</th>
                <th class="p-3 border">Date de fin</th>
                <th class="p-3 border">Domaine</th>
                <th class="p-3 border">Actions</th>
              </tr>
            </thead>
            <tbody id="offreTable" class="bg-white"></tbody>
          </table>

         <!-- Pagination Controls -->
          <div class="flex justify-between items-center mt-4">
            <button id="prevPage" class="px-4 py-2 bg-gray-300 text-gray-700 rounded disabled:opacity-50">Previous</button>
            <span id="pageInfo" class="text-gray-600"></span>
            <button id="nextPage" class="px-4 py-2 bg-gray-300 text-gray-700 rounded disabled:opacity-50">Next</button>
          </div>
        </div>
      </main>
    </div>
  </div>

  <!-- Add Modal -->
  <div id="addOffreModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
      <h2 class="text-xl font-semibold mb-4">Add Offre</h2>
      <form id="addOffreForm">
        <input type="hidden" id="addOffreId" />
        <div class="mb-4">
          <label class="block text-gray-700">Titre</label>
          <input type="text" id="addTitre" class="w-full p-2 border rounded" required />
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Description</label>
          <textarea id="addDescription" class="w-full p-2 border rounded" required></textarea>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Date de création</label>
          <input type="date" id="addDate_creation" class="w-full p-2 border rounded" required />
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Date de fin</label>
          <input type="date" id="addDate_fin" class="w-full p-2 border rounded" required />
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Domaine</label>
          <input type="text" id="addDomaine" class="w-full p-2 border rounded" required />
        </div>
        <div class="flex justify-end space-x-2">
          <button type="button" id="closeAddModal" class="px-4 py-2 bg-gray-400 text-white rounded">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Save</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Update Modal -->
  <div id="updateOffreModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
      <h2 class="text-xl font-semibold mb-4">Update Offre</h2>
      <form id="updateOffreForm">
        <input type="hidden" id="updateOffreId" />
        <div class="mb-4">
          <label class="block text-gray-700">Titre</label>
          <input type="text" id="updateTitre" class="w-full p-2 border rounded" required />
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Description</label>
          <textarea id="updateDescription" class="w-full p-2 border rounded" required></textarea>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Date de création</label>
          <input type="date" id="updateDate_creation" class="w-full p-2 border rounded" required />
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Date de fin</label>
          <input type="date" id="updateDate_fin" class="w-full p-2 border rounded" required />
        </div>
        <div class="mb-4">
          <label class="block text-gray-700">Domaine</label>
          <input type="text" id="updateDomaine" class="w-full p-2 border rounded" required />
        </div>
        <div class="flex justify-end space-x-2">
          <button type="button" id="closeUpdateModal" class="px-4 py-2 bg-gray-400 text-white rounded">Cancel</button>
          <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded">Save</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    let offres = [];
    let currentPage = 1;
    const offersPerPage = 5;

    const offreTable = document.getElementById('offreTable');
    const addOffreModal = document.getElementById('addOffreModal');
    const updateOffreModal = document.getElementById('updateOffreModal');
    const addOffreForm = document.getElementById('addOffreForm');
    const updateOffreForm = document.getElementById('updateOffreForm');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const pageInfo = document.getElementById('pageInfo');

    // Add offer modal
    document.getElementById('addOffreBtn').addEventListener('click', () => {
        addOffreForm.reset();
        addOffreModal.classList.remove('hidden');
    });

    document.getElementById('closeAddModal').addEventListener('click', () => {
        addOffreModal.classList.add('hidden');
    });

    // Fetch offers from the database
    function fetchOffres() {
        fetch('/display-offres') // Adjust the URL to your actual API endpoint
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    offres = data.offres;
                    renderOffres();
                }
            })
            .catch(error => console.error('Error fetching offers:', error));
    }
addOffreForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const newOffer = {
        titre: document.getElementById('addTitre').value,
        description: document.getElementById('addDescription').value,
        date_creation: document.getElementById('addDate_creation').value,
        date_fin: document.getElementById('addDate_fin').value,
        domaine: document.getElementById('addDomaine').value
    };

    // Call API to add offer
    fetch('/create-offre', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newOffer)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            offres.push(data.offre);
            renderOffres();
            addOffreModal.classList.add('hidden');

            // Show SweetAlert success message
            Swal.fire({
                title: "Offer Created!",
                text: "Your offer has been successfully added.",
                icon: "success",
                confirmButtonText: "OK"
            });
        } else {
            // Show SweetAlert error message if something goes wrong
            Swal.fire({
                title: "Error!",
                text: "Failed to create the offer. Please try again.",
                icon: "error",
                confirmButtonText: "OK"
            });
        }
    })
    .catch(error => {
        console.error("Error:", error);
        Swal.fire({
            title: "Error!",
            text: "An unexpected error occurred.",
            icon: "error",
            confirmButtonText: "OK"
        });
    });
});


function formatDateToDDMMYYYY(dateStr) {
    if (!dateStr) return "";
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatDateToYYYYMMDD(dateStr) {
    if (!dateStr) return "";
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${year}-${month}-${day}`;
}

function renderOffres() {
    const start = (currentPage - 1) * offersPerPage;
    const paginatedOffers = offres.slice(start, start + offersPerPage);

    offreTable.innerHTML = paginatedOffers.map(offre => `
        <tr class="border">
            <td class="p-3 border">${offre.id}</td>
            <td class="p-3 border">${offre.titre}</td>
            <td class="p-3 border">${offre.description}</td>
            <td class="p-3 border">${formatDateToDDMMYYYY(offre.date_creation)}</td>
            <td class="p-3 border">${formatDateToDDMMYYYY(offre.date_fin)}</td>
            <td class="p-3 border">${offre.domaine}</td>
            <td class="p-3 border">
                <button class="bg-yellow-600 text-white px-3 py-1 rounded-lg hover:bg-yellow-700" onclick="editOffre('${offre.id}')">Edit</button>
                <button class="bg-red-600 text-white px-3 py-1 rounded-lg hover:bg-red-700" onclick="deleteOffre('${offre.id}')">Delete</button>
            </td>
        </tr>
    `).join('');

    pageInfo.textContent = `Page ${currentPage} sur ${Math.ceil(offres.length / offersPerPage)}`;
    prevPageBtn.disabled = currentPage === 1;
    nextPageBtn.disabled = currentPage >= Math.ceil(offres.length / offersPerPage);
}

function editOffre(id) {
    const offre = offres.find(o => o.id == id);
    if (!offre) {
        Swal.fire("Erreur!", "Offre non trouvée.", "error");
        return;
    }

    document.getElementById('updateOffreId').value = offre.id;
    document.getElementById('updateTitre').value = offre.titre;
    document.getElementById('updateDescription').value = offre.description;
    document.getElementById('updateDate_creation').value = formatDateToYYYYMMDD(offre.date_creation);
    document.getElementById('updateDate_fin').value = formatDateToYYYYMMDD(offre.date_fin);
    document.getElementById('updateDomaine').value = offre.domaine;

    updateOffreModal.classList.remove('hidden');
}

updateOffreForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const updatedOffer = {
        id: document.getElementById('updateOffreId').value,
        titre: document.getElementById('updateTitre').value,
        description: document.getElementById('updateDescription').value,
        date_creation: document.getElementById('updateDate_creation').value,
        date_fin: document.getElementById('updateDate_fin').value,
        domaine: document.getElementById('updateDomaine').value
    };

    fetch('/update-offre', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedOffer)
    }).then(response => response.json())
      .then(data => {
          if (data.success) {
              const index = offres.findIndex(o => o.id == updatedOffer.id);
              offres[index] = updatedOffer;
              renderOffres();
              updateOffreModal.classList.add('hidden');
          } else {
              Swal.fire("Erreur!", "Échec de la mise à jour de l'offre.", "error");
          }
      }).catch(error => {
          console.error("Erreur:", error);
          Swal.fire("Erreur!", "Une erreur inattendue est survenue.", "error");
      });
});
    // Render offers with pagination
    function renderOffres() {
        const start = (currentPage - 1) * offersPerPage;
        const paginatedOffers = offres.slice(start, start + offersPerPage);

        offreTable.innerHTML = paginatedOffers.map(offre => `
            <tr class="border">
                <td class="p-3 border">${offre.id}</td>
                <td class="p-3 border">${offre.titre}</td>
                <td class="p-3 border">${offre.description}</td>
                <td class="p-3 border">${ formatDateToYYYYMMDD(offre.date_creation)}</td>
                <td class="p-3 border">${ formatDateToYYYYMMDD(offre.date_fin)}</td>
                <td class="p-3 border">${offre.domaine}</td>
                <td class="p-3 border">
                    <button class="bg-yellow-600 text-white px-3 py-1 rounded-lg hover:bg-yellow-700" onclick="editOffre('${offre.id}')">Edit</button>
                    <button class="bg-red-600 text-white px-3 py-1 rounded-lg hover:bg-red-700" onclick="deleteOffre('${offre.id}')">Delete</button>
                </td>
            </tr>
        `).join('');
        document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${Math.ceil(offres.length / offersPerPage)}`;

    }

    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderOffres();
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        if (currentPage < Math.ceil(offres.length / offersPerPage)) {
            currentPage++;
            renderOffres();
        }
    });



function deleteOffre(id) {
    Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/delete-offre/${id}`, {
                method: "DELETE",
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the offres array by removing the deleted offer
                    offres = offres.filter(offre => offre.id !== id);
                    
                    // Explicitly re-render the table to reflect changes
                    fetchOffres(); 

                    Swal.fire(
                        "Deleted!",
                        "Your offer has been deleted.",
                        "success"
                    );
                } else {
                    Swal.fire(
                        "Error!",
                        "Failed to delete the offer.",
                        "error"
                    );
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire("Error!", "An unexpected error occurred.", "error");
            });
        }
    });
}





    fetchOffres();
  </script>

</body>
</html>
